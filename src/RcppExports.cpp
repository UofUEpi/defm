// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// new_defm
SEXP new_defm(const IntegerVector& id, const IntegerMatrix& Y, const NumericMatrix& X, int order);
RcppExport SEXP _defm_new_defm(SEXP idSEXP, SEXP YSEXP, SEXP XSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type id(idSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(new_defm(id, Y, X, order));
    return rcpp_result_gen;
END_RCPP
}
// init_defm
int init_defm(SEXP m);
RcppExport SEXP _defm_init_defm(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(init_defm(m));
    return rcpp_result_gen;
END_RCPP
}
// term_defm_ones
int term_defm_ones(SEXP m, int idx);
RcppExport SEXP _defm_term_defm_ones(SEXP mSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(term_defm_ones(m, idx));
    return rcpp_result_gen;
END_RCPP
}
// term_defm_fe
int term_defm_fe(SEXP m, int idx, double k);
RcppExport SEXP _defm_term_defm_fe(SEXP mSEXP, SEXP idxSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(term_defm_fe(m, idx, k));
    return rcpp_result_gen;
END_RCPP
}
// term_defm_transition
int term_defm_transition(SEXP m, IntegerMatrix& mat, int covar_idx);
RcppExport SEXP _defm_term_defm_transition(SEXP mSEXP, SEXP matSEXP, SEXP covar_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type covar_idx(covar_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(term_defm_transition(m, mat, covar_idx));
    return rcpp_result_gen;
END_RCPP
}
// print_defm
SEXP print_defm(SEXP x);
RcppExport SEXP _defm_print_defm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(print_defm(x));
    return rcpp_result_gen;
END_RCPP
}
// loglike_defm
double loglike_defm(SEXP m, std::vector< double > par, bool as_log);
RcppExport SEXP _defm_loglike_defm(SEXP mSEXP, SEXP parSEXP, SEXP as_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type par(parSEXP);
    Rcpp::traits::input_parameter< bool >::type as_log(as_logSEXP);
    rcpp_result_gen = Rcpp::wrap(loglike_defm(m, par, as_log));
    return rcpp_result_gen;
END_RCPP
}
// sim_defm
IntegerMatrix sim_defm(SEXP m, std::vector< double > par, bool fill_t0);
RcppExport SEXP _defm_sim_defm(SEXP mSEXP, SEXP parSEXP, SEXP fill_t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::vector< double > >::type par(parSEXP);
    Rcpp::traits::input_parameter< bool >::type fill_t0(fill_t0SEXP);
    rcpp_result_gen = Rcpp::wrap(sim_defm(m, par, fill_t0));
    return rcpp_result_gen;
END_RCPP
}
// print_stats
int print_stats(SEXP m, int i);
RcppExport SEXP _defm_print_stats(SEXP mSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(print_stats(m, i));
    return rcpp_result_gen;
END_RCPP
}
// nterms_defm
int nterms_defm(SEXP m);
RcppExport SEXP _defm_nterms_defm(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(nterms_defm(m));
    return rcpp_result_gen;
END_RCPP
}
// names_defm
CharacterVector names_defm(SEXP m);
RcppExport SEXP _defm_names_defm(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(names_defm(m));
    return rcpp_result_gen;
END_RCPP
}
// nrow_defm
int nrow_defm(SEXP m);
RcppExport SEXP _defm_nrow_defm(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(nrow_defm(m));
    return rcpp_result_gen;
END_RCPP
}
// ncol_defm_y
int ncol_defm_y(SEXP m);
RcppExport SEXP _defm_ncol_defm_y(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ncol_defm_y(m));
    return rcpp_result_gen;
END_RCPP
}
// ncol_defm_x
int ncol_defm_x(SEXP m);
RcppExport SEXP _defm_ncol_defm_x(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ncol_defm_x(m));
    return rcpp_result_gen;
END_RCPP
}
// nobs_defm
int nobs_defm(SEXP m);
RcppExport SEXP _defm_nobs_defm(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(nobs_defm(m));
    return rcpp_result_gen;
END_RCPP
}
// morder_defm
int morder_defm(SEXP m);
RcppExport SEXP _defm_morder_defm(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(morder_defm(m));
    return rcpp_result_gen;
END_RCPP
}
// get_stats
NumericMatrix get_stats(SEXP m);
RcppExport SEXP _defm_get_stats(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(get_stats(m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_defm_new_defm", (DL_FUNC) &_defm_new_defm, 4},
    {"_defm_init_defm", (DL_FUNC) &_defm_init_defm, 1},
    {"_defm_term_defm_ones", (DL_FUNC) &_defm_term_defm_ones, 2},
    {"_defm_term_defm_fe", (DL_FUNC) &_defm_term_defm_fe, 3},
    {"_defm_term_defm_transition", (DL_FUNC) &_defm_term_defm_transition, 3},
    {"_defm_print_defm", (DL_FUNC) &_defm_print_defm, 1},
    {"_defm_loglike_defm", (DL_FUNC) &_defm_loglike_defm, 3},
    {"_defm_sim_defm", (DL_FUNC) &_defm_sim_defm, 3},
    {"_defm_print_stats", (DL_FUNC) &_defm_print_stats, 2},
    {"_defm_nterms_defm", (DL_FUNC) &_defm_nterms_defm, 1},
    {"_defm_names_defm", (DL_FUNC) &_defm_names_defm, 1},
    {"_defm_nrow_defm", (DL_FUNC) &_defm_nrow_defm, 1},
    {"_defm_ncol_defm_y", (DL_FUNC) &_defm_ncol_defm_y, 1},
    {"_defm_ncol_defm_x", (DL_FUNC) &_defm_ncol_defm_x, 1},
    {"_defm_nobs_defm", (DL_FUNC) &_defm_nobs_defm, 1},
    {"_defm_morder_defm", (DL_FUNC) &_defm_morder_defm, 1},
    {"_defm_get_stats", (DL_FUNC) &_defm_get_stats, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_defm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
